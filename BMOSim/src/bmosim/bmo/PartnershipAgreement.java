package bmosim.bmo;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: PartnershipAgreement <br>
 * @version generated on Thu Oct 26 02:05:01 WAT 2017 by Hichem
 */

public interface PartnershipAgreement extends BMElement {

    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#relates
     */
     
    /**
     * Gets all property values for the relates property.<p>
     * 
     * @returns a collection of values for the relates property.
     */
    Collection<? extends Actor> getRelates();

    /**
     * Checks if the class has a relates property value.<p>
     * 
     * @return true if there is a relates property value.
     */
    boolean hasRelates();

    /**
     * Adds a relates property value.<p>
     * 
     * @param newRelates the relates property value to be added
     */
    void addRelates(Actor newRelates);

    /**
     * Removes a relates property value.<p>
     * 
     * @param oldRelates the relates property value to be removed.
     */
    void removeRelates(Actor oldRelates);


    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#competitionDegree
     */
     
    /**
     * Gets all property values for the competitionDegree property.<p>
     * 
     * @returns a collection of values for the competitionDegree property.
     */
    Collection<? extends Object> getCompetitionDegree();

    /**
     * Checks if the class has a competitionDegree property value.<p>
     * 
     * @return true if there is a competitionDegree property value.
     */
    boolean hasCompetitionDegree();

    /**
     * Adds a competitionDegree property value.<p>
     * 
     * @param newCompetitionDegree the competitionDegree property value to be added
     */
    void addCompetitionDegree(Object newCompetitionDegree);

    /**
     * Removes a competitionDegree property value.<p>
     * 
     * @param oldCompetitionDegree the competitionDegree property value to be removed.
     */
    void removeCompetitionDegree(Object oldCompetitionDegree);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#competitionDegreeComments
     */
     
    /**
     * Gets all property values for the competitionDegreeComments property.<p>
     * 
     * @returns a collection of values for the competitionDegreeComments property.
     */
    Collection<? extends String> getCompetitionDegreeComments();

    /**
     * Checks if the class has a competitionDegreeComments property value.<p>
     * 
     * @return true if there is a competitionDegreeComments property value.
     */
    boolean hasCompetitionDegreeComments();

    /**
     * Adds a competitionDegreeComments property value.<p>
     * 
     * @param newCompetitionDegreeComments the competitionDegreeComments property value to be added
     */
    void addCompetitionDegreeComments(String newCompetitionDegreeComments);

    /**
     * Removes a competitionDegreeComments property value.<p>
     * 
     * @param oldCompetitionDegreeComments the competitionDegreeComments property value to be removed.
     */
    void removeCompetitionDegreeComments(String oldCompetitionDegreeComments);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#integrationDegree
     */
     
    /**
     * Gets all property values for the integrationDegree property.<p>
     * 
     * @returns a collection of values for the integrationDegree property.
     */
    Collection<? extends Object> getIntegrationDegree();

    /**
     * Checks if the class has a integrationDegree property value.<p>
     * 
     * @return true if there is a integrationDegree property value.
     */
    boolean hasIntegrationDegree();

    /**
     * Adds a integrationDegree property value.<p>
     * 
     * @param newIntegrationDegree the integrationDegree property value to be added
     */
    void addIntegrationDegree(Object newIntegrationDegree);

    /**
     * Removes a integrationDegree property value.<p>
     * 
     * @param oldIntegrationDegree the integrationDegree property value to be removed.
     */
    void removeIntegrationDegree(Object oldIntegrationDegree);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#integrationDegreeComments
     */
     
    /**
     * Gets all property values for the integrationDegreeComments property.<p>
     * 
     * @returns a collection of values for the integrationDegreeComments property.
     */
    Collection<? extends String> getIntegrationDegreeComments();

    /**
     * Checks if the class has a integrationDegreeComments property value.<p>
     * 
     * @return true if there is a integrationDegreeComments property value.
     */
    boolean hasIntegrationDegreeComments();

    /**
     * Adds a integrationDegreeComments property value.<p>
     * 
     * @param newIntegrationDegreeComments the integrationDegreeComments property value to be added
     */
    void addIntegrationDegreeComments(String newIntegrationDegreeComments);

    /**
     * Removes a integrationDegreeComments property value.<p>
     * 
     * @param oldIntegrationDegreeComments the integrationDegreeComments property value to be removed.
     */
    void removeIntegrationDegreeComments(String oldIntegrationDegreeComments);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#partnershipCategory
     */
     
    /**
     * Gets all property values for the partnershipCategory property.<p>
     * 
     * @returns a collection of values for the partnershipCategory property.
     */
    Collection<? extends Object> getPartnershipCategory();

    /**
     * Checks if the class has a partnershipCategory property value.<p>
     * 
     * @return true if there is a partnershipCategory property value.
     */
    boolean hasPartnershipCategory();

    /**
     * Adds a partnershipCategory property value.<p>
     * 
     * @param newPartnershipCategory the partnershipCategory property value to be added
     */
    void addPartnershipCategory(Object newPartnershipCategory);

    /**
     * Removes a partnershipCategory property value.<p>
     * 
     * @param oldPartnershipCategory the partnershipCategory property value to be removed.
     */
    void removePartnershipCategory(Object oldPartnershipCategory);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#reasoning
     */
     
    /**
     * Gets all property values for the reasoning property.<p>
     * 
     * @returns a collection of values for the reasoning property.
     */
    Collection<? extends String> getReasoning();

    /**
     * Checks if the class has a reasoning property value.<p>
     * 
     * @return true if there is a reasoning property value.
     */
    boolean hasReasoning();

    /**
     * Adds a reasoning property value.<p>
     * 
     * @param newReasoning the reasoning property value to be added
     */
    void addReasoning(String newReasoning);

    /**
     * Removes a reasoning property value.<p>
     * 
     * @param oldReasoning the reasoning property value to be removed.
     */
    void removeReasoning(String oldReasoning);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#strategicImportance
     */
     
    /**
     * Gets all property values for the strategicImportance property.<p>
     * 
     * @returns a collection of values for the strategicImportance property.
     */
    Collection<? extends Object> getStrategicImportance();

    /**
     * Checks if the class has a strategicImportance property value.<p>
     * 
     * @return true if there is a strategicImportance property value.
     */
    boolean hasStrategicImportance();

    /**
     * Adds a strategicImportance property value.<p>
     * 
     * @param newStrategicImportance the strategicImportance property value to be added
     */
    void addStrategicImportance(Object newStrategicImportance);

    /**
     * Removes a strategicImportance property value.<p>
     * 
     * @param oldStrategicImportance the strategicImportance property value to be removed.
     */
    void removeStrategicImportance(Object oldStrategicImportance);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#strategicImportanceComments
     */
     
    /**
     * Gets all property values for the strategicImportanceComments property.<p>
     * 
     * @returns a collection of values for the strategicImportanceComments property.
     */
    Collection<? extends String> getStrategicImportanceComments();

    /**
     * Checks if the class has a strategicImportanceComments property value.<p>
     * 
     * @return true if there is a strategicImportanceComments property value.
     */
    boolean hasStrategicImportanceComments();

    /**
     * Adds a strategicImportanceComments property value.<p>
     * 
     * @param newStrategicImportanceComments the strategicImportanceComments property value to be added
     */
    void addStrategicImportanceComments(String newStrategicImportanceComments);

    /**
     * Removes a strategicImportanceComments property value.<p>
     * 
     * @param oldStrategicImportanceComments the strategicImportanceComments property value to be removed.
     */
    void removeStrategicImportanceComments(String oldStrategicImportanceComments);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#switchingCost
     */
     
    /**
     * Gets all property values for the switchingCost property.<p>
     * 
     * @returns a collection of values for the switchingCost property.
     */
    Collection<? extends Object> getSwitchingCost();

    /**
     * Checks if the class has a switchingCost property value.<p>
     * 
     * @return true if there is a switchingCost property value.
     */
    boolean hasSwitchingCost();

    /**
     * Adds a switchingCost property value.<p>
     * 
     * @param newSwitchingCost the switchingCost property value to be added
     */
    void addSwitchingCost(Object newSwitchingCost);

    /**
     * Removes a switchingCost property value.<p>
     * 
     * @param oldSwitchingCost the switchingCost property value to be removed.
     */
    void removeSwitchingCost(Object oldSwitchingCost);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#switchingCostComments
     */
     
    /**
     * Gets all property values for the switchingCostComments property.<p>
     * 
     * @returns a collection of values for the switchingCostComments property.
     */
    Collection<? extends String> getSwitchingCostComments();

    /**
     * Checks if the class has a switchingCostComments property value.<p>
     * 
     * @return true if there is a switchingCostComments property value.
     */
    boolean hasSwitchingCostComments();

    /**
     * Adds a switchingCostComments property value.<p>
     * 
     * @param newSwitchingCostComments the switchingCostComments property value to be added
     */
    void addSwitchingCostComments(String newSwitchingCostComments);

    /**
     * Removes a switchingCostComments property value.<p>
     * 
     * @param oldSwitchingCostComments the switchingCostComments property value to be removed.
     */
    void removeSwitchingCostComments(String oldSwitchingCostComments);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#synonyms
     */
     
    /**
     * Gets all property values for the synonyms property.<p>
     * 
     * @returns a collection of values for the synonyms property.
     */
    Collection<? extends String> getSynonyms();

    /**
     * Checks if the class has a synonyms property value.<p>
     * 
     * @return true if there is a synonyms property value.
     */
    boolean hasSynonyms();

    /**
     * Adds a synonyms property value.<p>
     * 
     * @param newSynonyms the synonyms property value to be added
     */
    void addSynonyms(String newSynonyms);

    /**
     * Removes a synonyms property value.<p>
     * 
     * @param oldSynonyms the synonyms property value to be removed.
     */
    void removeSynonyms(String oldSynonyms);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
