package bmosim.bmo;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: CoreCapability <br>
 * @version generated on Thu Oct 26 02:05:01 WAT 2017 by Hichem
 */

public interface CoreCapability extends Resource {

    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#isCreatedBy
     */
     
    /**
     * Gets all property values for the isCreatedBy property.<p>
     * 
     * @returns a collection of values for the isCreatedBy property.
     */
    Collection<? extends ValueConfiguration> getIsCreatedBy();

    /**
     * Checks if the class has a isCreatedBy property value.<p>
     * 
     * @return true if there is a isCreatedBy property value.
     */
    boolean hasIsCreatedBy();

    /**
     * Adds a isCreatedBy property value.<p>
     * 
     * @param newIsCreatedBy the isCreatedBy property value to be added
     */
    void addIsCreatedBy(ValueConfiguration newIsCreatedBy);

    /**
     * Removes a isCreatedBy property value.<p>
     * 
     * @param oldIsCreatedBy the isCreatedBy property value to be removed.
     */
    void removeIsCreatedBy(ValueConfiguration oldIsCreatedBy);


    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#isNeededBy
     */
     
    /**
     * Gets all property values for the isNeededBy property.<p>
     * 
     * @returns a collection of values for the isNeededBy property.
     */
    Collection<? extends ValueConfiguration> getIsNeededBy();

    /**
     * Checks if the class has a isNeededBy property value.<p>
     * 
     * @return true if there is a isNeededBy property value.
     */
    boolean hasIsNeededBy();

    /**
     * Adds a isNeededBy property value.<p>
     * 
     * @param newIsNeededBy the isNeededBy property value to be added
     */
    void addIsNeededBy(ValueConfiguration newIsNeededBy);

    /**
     * Removes a isNeededBy property value.<p>
     * 
     * @param oldIsNeededBy the isNeededBy property value to be removed.
     */
    void removeIsNeededBy(ValueConfiguration oldIsNeededBy);


    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#isRequiredBy
     */
     
    /**
     * Gets all property values for the isRequiredBy property.<p>
     * 
     * @returns a collection of values for the isRequiredBy property.
     */
    Collection<? extends ValueProposition> getIsRequiredBy();

    /**
     * Checks if the class has a isRequiredBy property value.<p>
     * 
     * @return true if there is a isRequiredBy property value.
     */
    boolean hasIsRequiredBy();

    /**
     * Adds a isRequiredBy property value.<p>
     * 
     * @param newIsRequiredBy the isRequiredBy property value to be added
     */
    void addIsRequiredBy(ValueProposition newIsRequiredBy);

    /**
     * Removes a isRequiredBy property value.<p>
     * 
     * @param oldIsRequiredBy the isRequiredBy property value to be removed.
     */
    void removeIsRequiredBy(ValueProposition oldIsRequiredBy);


    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#reasoning
     */
     
    /**
     * Gets all property values for the reasoning property.<p>
     * 
     * @returns a collection of values for the reasoning property.
     */
    Collection<? extends String> getReasoning();

    /**
     * Checks if the class has a reasoning property value.<p>
     * 
     * @return true if there is a reasoning property value.
     */
    boolean hasReasoning();

    /**
     * Adds a reasoning property value.<p>
     * 
     * @param newReasoning the reasoning property value to be added
     */
    void addReasoning(String newReasoning);

    /**
     * Removes a reasoning property value.<p>
     * 
     * @param oldReasoning the reasoning property value to be removed.
     */
    void removeReasoning(String oldReasoning);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#resourceCategory
     */
     
    /**
     * Gets all property values for the resourceCategory property.<p>
     * 
     * @returns a collection of values for the resourceCategory property.
     */
    Collection<? extends Object> getResourceCategory();

    /**
     * Checks if the class has a resourceCategory property value.<p>
     * 
     * @return true if there is a resourceCategory property value.
     */
    boolean hasResourceCategory();

    /**
     * Adds a resourceCategory property value.<p>
     * 
     * @param newResourceCategory the resourceCategory property value to be added
     */
    void addResourceCategory(Object newResourceCategory);

    /**
     * Removes a resourceCategory property value.<p>
     * 
     * @param oldResourceCategory the resourceCategory property value to be removed.
     */
    void removeResourceCategory(Object oldResourceCategory);



    /* ***************************************************
     * Property http://www.owl-ontologies.com/unnamed.owl#synonyms
     */
     
    /**
     * Gets all property values for the synonyms property.<p>
     * 
     * @returns a collection of values for the synonyms property.
     */
    Collection<? extends String> getSynonyms();

    /**
     * Checks if the class has a synonyms property value.<p>
     * 
     * @return true if there is a synonyms property value.
     */
    boolean hasSynonyms();

    /**
     * Adds a synonyms property value.<p>
     * 
     * @param newSynonyms the synonyms property value to be added
     */
    void addSynonyms(String newSynonyms);

    /**
     * Removes a synonyms property value.<p>
     * 
     * @param oldSynonyms the synonyms property value to be removed.
     */
    void removeSynonyms(String oldSynonyms);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
